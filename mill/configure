#!/usr/bin/env python3
from glob import glob
import os
import subprocess
import sys; sys.path.append('tools')

from ninja_syntax import Writer

def llvm_config(*args):
    return subprocess.check_output(['llvm-config'] + list(args)).decode()

w = Writer(open('build.ninja', 'w'))

w.variable('builddir', 'build')

w.variable('cxx', os.environ.get('CXX', 'clang++'))
w.variable('ld', '$cxx')

w.variable('cxxflags', (os.environ.get('CXXFLAGS', '') + '''
    -std=c++1y
    -stdlib=libc++
    -Wall -Wextra -Werror -pedantic
    -isystem ~/Catch/include
    -isystem ~/nonius/include
    -isystem ~/baka/include
    -isystem ''' + llvm_config('--includedir') + '''
    -D__STDC_LIMIT_MACROS
    -D__STDC_CONSTANT_MACROS
    -fcolor-diagnostics
    -g
''').replace('\n', ' '))
w.variable('ldflags', ('''
    -stdlib=libc++
    -L ''' + llvm_config('--libdir') + '''
    ''' + llvm_config('--libs', 'all', '--system-libs') + '''
''').replace('\n', ' '))

w.rule('cxx', '$cxx $cxxflags -MMD -MF $out.d -c -o $out $in', depfile='$out.d')
w.rule('ld', '$ld $ldflags -o $out $in')
w.rule('instructions', 'tools/instructions.awk $in > $out')

w.build('$builddir/instructions.hpp', 'instructions', ['src/instructions.txt'])

targets = {'src': [], 'test': []}
for kind, source_file in [('src', f) for f in glob('src/*.cpp')] + [('test', f) for f in glob('test/*.cpp')]:
    target = '$builddir/' + source_file.replace('.cpp', '.o')
    targets[kind].append(target)
    if kind == 'src' and source_file != 'src/main.cpp':
        targets['test'].append(target)
    w.build(target, 'cxx', [source_file], implicit=['$builddir/instructions.hpp'])

for target in targets:
    if targets[target]:
        w.build('$builddir/' + target + '.out', 'ld', targets[target])
